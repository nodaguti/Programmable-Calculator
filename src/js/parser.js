/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"EOF":4,"program_source":5,"program_body":6,"block":7,"if_block":8,"while_block":9,"function_declaration":10,"line":11,"COMMENT":12,"statement":13,"expression":14,";":15,"variable_assignment":16,"return_statement":17,"FUNCTION":18,"IDENTIFIER":19,"(":20,")":21,"{":22,"}":23,"function_parameter":24,"variable_identifier":25,",":26,"function_call":27,"CALL":28,"=":29,"if_true_block":30,"if_else_block":31,"IF":32,"boolean_expression":33,"ELSE":34,"WHILE":35,"RETURN":36,"simple_expression":37,"binary_boolean_expression":38,"RELATION":39,"MAG_RELATION":40,"primary":41,"-":42,"+":43,"*":44,"/":45,"%":46,"^":47,"!":48,"NUMBER":49,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",12:"COMMENT",15:";",18:"FUNCTION",19:"IDENTIFIER",20:"(",21:")",22:"{",23:"}",26:",",28:"CALL",29:"=",32:"IF",34:"ELSE",35:"WHILE",36:"RETURN",39:"RELATION",40:"MAG_RELATION",42:"-",43:"+",44:"*",45:"/",46:"%",47:"^",48:"!",49:"NUMBER"},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[11,1],[11,1],[11,2],[13,1],[13,1],[10,7],[10,8],[24,1],[24,3],[27,2],[27,2],[16,3],[25,1],[8,1],[8,2],[30,7],[31,4],[9,7],[17,2],[14,1],[14,1],[33,1],[33,3],[33,3],[38,3],[38,3],[37,1],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[41,1],[41,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = head; 
break;
case 2: head.next = $$[$0-1] 
break;
case 3: this.$ = $$[$0]; 
break;
case 4: $$[$0-1].tail.next = $$[$0]; this.$ = $$[$0-1]; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: $$[$0-1].tail.next = $$[$0]; this.$ = $$[$0-1]; 
break;
case 11:
        if($$[$0].lastIndexOf('/*!', 0) === 0){
            this.$ = new NodeCommand({ value: $$[$0], lineNumber: yylineno });
        }else{
            this.$ = new NodeNoop({});
        }
    
break;
case 14: this.$ = $$[$0-1]; 
break;
case 17:
        var funcNode = new NodeFunction({
            value: $$[$0-5],
            parameters: [],
            body: $$[$0-1],
            lineNumber: yylineno
        });

        this.$ = new NodeFunctionDeclaration({ value: funcNode, lineNumber: yylineno });
    
break;
case 18:
        var funcNode = new NodeFunction({
            value: $$[$0-6],
            parameters: $$[$0-4],
            body: $$[$0-1],
            lineNumber: yylineno
        });

        this.$ = new NodeFunctionDeclaration({ value: funcNode, lineNumber: yylineno });
    
break;
case 19: this.$ = [ $$[$0] ]; 
break;
case 20: if($$[$0]) $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21: this.$ = new NodeFunctionCall({ value: $$[$0], lineNumber: yylineno }); 
break;
case 22: $$[$0-1].children.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 23: this.$ = new NodeAssign({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 24: this.$ = new NodeVariable({ value: $$[$0], lineNumber: yylineno }); 
break;
case 25: this.$ = $$[$0]; 
break;
case 26: $$[$0-1].right = $$[$0]; this.$ = $$[$0-1]; 
break;
case 27:
        this.$ = new NodeIf({ value: $$[$0-4], left: $$[$0-1], lineNumber: yylineno });
    
break;
case 28: this.$ = $$[$0-1]; 
break;
case 29:
        this.$ = new NodeWhile({ value: $$[$0-4], body: $$[$0-1], lineNumber: yylineno });
    
break;
case 30: this.$ = new NodeReturn({ value: $$[$0], lineNumber: yylineno }); 
break;
case 34:
        this.$ = new NodeRelation({ value: $$[$0-1], left: $$[$0-2], right: $$[$0], lineNumber: yylineno });
    
break;
case 35: this.$ = $$[$0-1]; 
break;
case 36:
        this.$ = new NodeMagnitudeRelation({ value: $$[$0-1], left: $$[$0-2], right: $$[$0], lineNumber: yylineno });
    
break;
case 37: this.$ = $$[$0-1]; 
break;
case 39:
        var zero = new NodeNumber({ value: 0, lineNumber: yylineno });
        this.$ = new NodeMinus({ left: zero, right: $$[$0], lineNumber: yylineno });
    
break;
case 40: this.$ = new NodePlus({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 41: this.$ = new NodeMinus({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 42: this.$ = new NodeMul({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 43: this.$ = new NodeDiv({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 44: this.$ = new NodeMod({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 45: this.$ = new NodePower({ left: $$[$0-2], right: $$[$0], lineNumber: yylineno }); 
break;
case 46: this.$ = new NodeFactorial({ value: $$[$0-1], lineNumber: yylineno }); 
break;
case 47: this.$ = $$[$0-1]; 
break;
case 50: this.$ = new NodeNumber({ value: $$[$0], lineNumber: yylineno }); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{1:[3]},{1:[2,1]},{4:[1,31],6:32,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,3],7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,5],12:[2,5],18:[2,5],19:[2,5],20:[2,5],23:[2,5],28:[2,5],32:[2,5],35:[2,5],36:[2,5],42:[2,5],49:[2,5]},{4:[2,7],12:[2,7],18:[2,7],19:[2,7],20:[2,7],23:[2,7],28:[2,7],32:[2,7],35:[2,7],36:[2,7],42:[2,7],49:[2,7]},{4:[2,8],12:[2,8],18:[2,8],19:[2,8],20:[2,8],23:[2,8],28:[2,8],32:[2,8],35:[2,8],36:[2,8],42:[2,8],49:[2,8]},{4:[2,9],12:[2,9],18:[2,9],19:[2,9],20:[2,9],23:[2,9],28:[2,9],32:[2,9],35:[2,9],36:[2,9],42:[2,9],49:[2,9]},{4:[2,10],12:[2,10],15:[1,34],18:[2,10],19:[2,10],20:[2,10],23:[2,10],28:[2,10],32:[2,10],35:[2,10],36:[2,10],42:[2,10],49:[2,10]},{4:[2,11],12:[2,11],18:[2,11],19:[2,11],20:[2,11],23:[2,11],28:[2,11],32:[2,11],35:[2,11],36:[2,11],42:[2,11],49:[2,11]},{4:[2,25],12:[2,25],18:[2,25],19:[2,25],20:[2,25],23:[2,25],28:[2,25],31:35,32:[2,25],34:[1,36],35:[2,25],36:[2,25],42:[2,25],49:[2,25]},{20:[1,37]},{19:[1,38]},{4:[2,12],12:[2,12],15:[2,12],18:[2,12],19:[2,12],20:[2,12],23:[2,12],28:[2,12],32:[2,12],35:[2,12],36:[2,12],42:[2,12],49:[2,12]},{4:[2,13],12:[2,13],15:[2,13],18:[2,13],19:[2,13],20:[2,13],23:[2,13],28:[2,13],32:[2,13],35:[2,13],36:[2,13],42:[2,13],49:[2,13]},{20:[1,39]},{4:[2,15],12:[2,15],15:[2,15],18:[2,15],19:[2,15],20:[2,15],23:[2,15],28:[2,15],32:[2,15],35:[2,15],36:[2,15],42:[2,15],49:[2,15]},{4:[2,16],12:[2,16],15:[2,16],18:[2,16],19:[2,16],20:[2,16],23:[2,16],28:[2,16],32:[2,16],35:[2,16],36:[2,16],42:[2,16],49:[2,16]},{4:[2,31],12:[2,31],15:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],23:[2,31],28:[2,31],32:[2,31],35:[2,31],36:[2,31],39:[2,31],40:[1,47],42:[1,41],43:[1,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46],49:[2,31]},{4:[2,32],12:[2,32],15:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],23:[2,32],28:[2,32],32:[2,32],35:[2,32],36:[2,32],39:[1,48],40:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32]},{4:[2,49],12:[2,49],15:[2,49],18:[2,49],19:[2,49],20:[2,49],23:[2,49],28:[2,49],29:[1,49],32:[2,49],35:[2,49],36:[2,49],40:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49]},{14:50,19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:20,37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,38],12:[2,38],15:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],23:[2,38],28:[2,38],32:[2,38],35:[2,38],36:[2,38],39:[2,38],40:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38],49:[2,38]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:52,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:55,37:54,38:56,41:23,42:[1,24],49:[1,29]},{4:[2,33],12:[2,33],15:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],23:[2,33],28:[2,33],32:[2,33],35:[2,33],36:[2,33],39:[2,33],40:[2,33],42:[2,33],43:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33],49:[2,33]},{4:[2,24],12:[2,24],15:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],23:[2,24],26:[2,24],28:[2,24],29:[2,24],32:[2,24],35:[2,24],36:[2,24],39:[2,24],40:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24]},{4:[2,48],12:[2,48],14:57,15:[2,48],18:[2,48],19:[1,27],20:[1,25],21:[2,48],23:[2,48],25:51,27:28,28:[1,30],32:[2,48],33:20,35:[2,48],36:[2,48],37:19,38:26,39:[2,48],40:[2,48],41:23,42:[1,24],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[1,29]},{4:[2,50],12:[2,50],15:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],23:[2,50],28:[2,50],32:[2,50],35:[2,50],36:[2,50],39:[2,50],40:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50]},{19:[1,58]},{1:[2,2]},{4:[2,4],7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,6],12:[2,6],18:[2,6],19:[2,6],20:[2,6],23:[2,6],28:[2,6],32:[2,6],35:[2,6],36:[2,6],42:[2,6],49:[2,6]},{4:[2,14],12:[2,14],15:[2,14],18:[2,14],19:[2,14],20:[2,14],23:[2,14],28:[2,14],32:[2,14],35:[2,14],36:[2,14],42:[2,14],49:[2,14]},{4:[2,26],12:[2,26],18:[2,26],19:[2,26],20:[2,26],23:[2,26],28:[2,26],32:[2,26],35:[2,26],36:[2,26],42:[2,26],49:[2,26]},{22:[1,59]},{19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:60,37:61,38:26,41:23,42:[1,24],49:[1,29]},{20:[1,62]},{19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:63,37:61,38:26,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:64,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:65,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:66,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:67,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:68,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:69,41:23,42:[1,24],49:[1,29]},{4:[2,46],12:[2,46],15:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],23:[2,46],28:[2,46],32:[2,46],35:[2,46],36:[2,46],39:[2,46],40:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:70,41:23,42:[1,24],49:[1,29]},{19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:71,37:61,38:26,41:23,42:[1,24],49:[1,29]},{14:72,19:[1,27],20:[1,25],25:51,27:28,28:[1,30],33:20,37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,30],12:[2,30],15:[2,30],18:[2,30],19:[2,30],20:[2,30],23:[2,30],28:[2,30],32:[2,30],35:[2,30],36:[2,30],42:[2,30],49:[2,30]},{4:[2,49],12:[2,49],15:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],23:[2,49],28:[2,49],32:[2,49],35:[2,49],36:[2,49],39:[2,49],40:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49]},{4:[2,39],12:[2,39],15:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],23:[2,39],28:[2,39],32:[2,39],35:[2,39],36:[2,39],39:[2,39],40:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39]},{19:[1,27],20:[1,53],25:51,27:28,28:[1,30],37:73,41:23,42:[1,24],49:[1,29]},{21:[1,74],40:[1,47],42:[1,41],43:[1,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46]},{21:[1,75],39:[1,48]},{21:[1,76],39:[2,33]},{4:[2,22],12:[2,22],15:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],23:[2,22],28:[2,22],32:[2,22],35:[2,22],36:[2,22],39:[2,22],40:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22]},{4:[2,21],12:[2,21],15:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],23:[2,21],28:[2,21],32:[2,21],35:[2,21],36:[2,21],39:[2,21],40:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],49:[2,21]},{6:77,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{21:[1,78],39:[1,48]},{40:[1,47],42:[1,41],43:[1,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46]},{19:[1,27],21:[1,79],24:80,25:81},{21:[1,82],39:[1,48]},{4:[2,40],12:[2,40],15:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],23:[2,40],28:[2,40],32:[2,40],35:[2,40],36:[2,40],39:[2,40],40:[2,40],42:[2,40],43:[2,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46],49:[2,40]},{4:[2,41],12:[2,41],15:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],23:[2,41],28:[2,41],32:[2,41],35:[2,41],36:[2,41],39:[2,41],40:[2,41],42:[2,41],43:[2,41],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46],49:[2,41]},{4:[2,42],12:[2,42],15:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],23:[2,42],28:[2,42],32:[2,42],35:[2,42],36:[2,42],39:[2,42],40:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[1,44],47:[1,45],48:[1,46],49:[2,42]},{4:[2,43],12:[2,43],15:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],23:[2,43],28:[2,43],32:[2,43],35:[2,43],36:[2,43],39:[2,43],40:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[1,44],47:[1,45],48:[1,46],49:[2,43]},{4:[2,44],12:[2,44],15:[2,44],18:[2,44],19:[2,44],20:[2,44],21:[2,44],23:[2,44],28:[2,44],32:[2,44],35:[2,44],36:[2,44],39:[2,44],40:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[1,44],47:[2,44],48:[2,44],49:[2,44]},{4:[2,45],12:[2,45],15:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],23:[2,45],28:[2,45],32:[2,45],35:[2,45],36:[2,45],39:[2,45],40:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[1,44],47:[2,45],48:[1,46],49:[2,45]},{4:[2,36],12:[2,36],15:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],23:[2,36],28:[2,36],32:[2,36],35:[2,36],36:[2,36],39:[2,36],40:[2,36],42:[1,41],43:[1,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46],49:[2,36]},{4:[2,34],12:[2,34],15:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],23:[2,34],28:[2,34],32:[2,34],35:[2,34],36:[2,34],39:[1,48],40:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34]},{4:[2,23],12:[2,23],15:[2,23],18:[2,23],19:[2,23],20:[2,23],23:[2,23],28:[2,23],32:[2,23],35:[2,23],36:[2,23],42:[2,23],49:[2,23]},{21:[1,74],42:[1,41],43:[1,40],44:[1,42],45:[1,43],46:[1,44],47:[1,45],48:[1,46]},{4:[2,47],12:[2,47],15:[2,47],18:[2,47],19:[2,47],20:[2,47],21:[2,47],23:[2,47],28:[2,47],32:[2,47],35:[2,47],36:[2,47],39:[2,47],40:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47]},{4:[2,35],12:[2,35],15:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],23:[2,35],28:[2,35],32:[2,35],35:[2,35],36:[2,35],39:[2,35],40:[2,35],42:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],49:[2,35]},{4:[2,37],12:[2,37],15:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],23:[2,37],28:[2,37],32:[2,37],35:[2,37],36:[2,37],39:[2,37],40:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37]},{7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],23:[1,83],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{22:[1,84]},{22:[1,85]},{21:[1,86],26:[1,87]},{21:[2,19],26:[2,19]},{22:[1,88]},{4:[2,28],12:[2,28],18:[2,28],19:[2,28],20:[2,28],23:[2,28],28:[2,28],32:[2,28],35:[2,28],36:[2,28],42:[2,28],49:[2,28]},{6:89,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{6:90,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{22:[1,91]},{19:[1,27],25:92},{6:93,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],23:[1,94],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],23:[1,95],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{6:96,7:5,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{21:[2,20],26:[2,20]},{7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],23:[1,97],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,29],12:[2,29],18:[2,29],19:[2,29],20:[2,29],23:[2,29],28:[2,29],32:[2,29],35:[2,29],36:[2,29],42:[2,29],49:[2,29]},{4:[2,17],12:[2,17],18:[2,17],19:[2,17],20:[2,17],23:[2,17],28:[2,17],32:[2,17],35:[2,17],36:[2,17],42:[2,17],49:[2,17]},{7:33,8:6,9:7,10:8,11:9,12:[1,10],13:14,14:15,16:17,17:18,18:[1,13],19:[1,27],20:[1,25],23:[1,98],25:21,27:28,28:[1,30],30:11,32:[1,16],33:20,35:[1,12],36:[1,22],37:19,38:26,41:23,42:[1,24],49:[1,29]},{4:[2,27],12:[2,27],18:[2,27],19:[2,27],20:[2,27],23:[2,27],28:[2,27],32:[2,27],34:[2,27],35:[2,27],36:[2,27],42:[2,27],49:[2,27]},{4:[2,18],12:[2,18],18:[2,18],19:[2,18],20:[2,18],23:[2,18],28:[2,18],32:[2,18],35:[2,18],36:[2,18],42:[2,18],49:[2,18]}],
defaultActions: {2:[2,1],31:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 12
break;
case 2:return 12
break;
case 3:return 49
break;
case 4:return 40
break;
case 5:return 40
break;
case 6:return 40
break;
case 7:return 40
break;
case 8:return 40
break;
case 9:return 40
break;
case 10:return 39
break;
case 11:return 39
break;
case 12:return 44
break;
case 13:return 45
break;
case 14:return 42
break;
case 15:return 43
break;
case 16:return 47
break;
case 17:return 48
break;
case 18:return 46
break;
case 19:return 20
break;
case 20:return 21
break;
case 21:return 22
break;
case 22:return 23
break;
case 23:return 26
break;
case 24:return 29
break;
case 25:return ':'
break;
case 26:return 15
break;
case 27:return 18
break;
case 28:return 'VAR'
break;
case 29:return 32
break;
case 30:return 34
break;
case 31:return 36
break;
case 32:return 35
break;
case 33:return 28
break;
case 34:return 19
break;
case 35:return 4
break;
case 36:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*.*\*\/)/,/^(?:\/\/.*[\n\r])/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:function\b)/,/^(?:var\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:call\b)/,/^(?:[a-zA-Z_]\w*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}